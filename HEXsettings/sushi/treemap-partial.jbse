resolve begin

-- parameter value and field Entry.value are both distinct objects or null, or alias of each other 
{ROOT}:value instanceof java/lang/Object aliases target {ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)*.sushi/treemap/TreeMap$Entry:value;
{ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)*.sushi/treemap/TreeMap$Entry:value instanceof java/lang/Object aliases target {ROOT}:value;

-- root/left/right entries expand and cannot be values
{ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)* instanceof sushi/treemap/TreeMap$Entry aliases nothing;
{ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)*.value instanceof java/lang/Object aliases target {ROOT}:(?!{°}*sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)*{EOL}){°}*;

-- TreeMap.Entry.wellConnected
{ROOT}:this.sushi/treemap/TreeMap:root.sushi/treemap/TreeMap$Entry:parent instanceof sushi/treemap/TreeMap$Entry expands to nothing;
{ROOT}:this.sushi/treemap/TreeMap:root.sushi/treemap/TreeMap$Entry:parent instanceof sushi/treemap/TreeMap$Entry aliases nothing;
{ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)+.sushi/treemap/TreeMap$Entry:parent instanceof sushi/treemap/TreeMap$Entry not null;
{ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)+.sushi/treemap/TreeMap$Entry:parent instanceof sushi/treemap/TreeMap$Entry expands to nothing;
{ROOT}:this.sushi/treemap/TreeMap:root(.sushi/treemap/TreeMap$Entry:left|.sushi/treemap/TreeMap$Entry:right)+.sushi/treemap/TreeMap$Entry:parent instanceof sushi/treemap/TreeMap$Entry aliases target {$REF}.{UP}.{UP};

resolve end
